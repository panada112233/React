import React, { useState, useEffect } from "react";
import { Link } from 'react-router-dom';
import { pdfMake, font } from "../libs/pdfmake";

const LeaveForm = () => {

    const userId = sessionStorage.getItem("userId");
    const [formData, setFormData] = useState({
        userid: userId,
        leaveTypeId: "",
        createdate: "",
        fullname: "",
        rolesid: "",
        reason: "",
        startdate: "",
        enddate: "",
        totalleave: 0,
        leavedType: "",
        leaved_startdate: "",
        leaved_enddate: "",
        totalleaved: 0,
        friendeContact: "",
        contact: "",
        workingstart: "",
        approvedDate: "",
        hrApprovedDate: "",
        sentToHRDate: "",
        hrSignature: "",
        managerName: "",
        managerComment: "",
    });

    const [savedForms, setSavedForms] = useState([]);
    const [itemToDelete, setItemToDelete] = useState(null);
    const [isNotificationModalOpen, setNotificationModalOpen] = useState(false);
    const [notificationMessage, setNotificationMessage] = useState("");

    const [leavetpyeState, setleavetpyeState] = useState([]);
    const [rolesState, setrolesState] = useState([]);
    const leaveTypeName = leavetpyeState.find(item => item.leaveTypeid === formData.leaveTypeId)?.leaveTypeTh || "‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏";
    const roleName = rolesState.find(item => item.rolesid === formData.rolesid)?.rolesname || "‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏";
    const leavedTypeName = leavetpyeState.find(item => item.leaveTypeid === formData.leavedType)?.leaveTypeTh || "‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏";

    useEffect(() => {
        if (userId) {
            fetchSavedForms();
            fetchLeaveType();
            fetchRoles();
        }
    }, [userId]);
    const fetchLeaveType = async () => {

        try {
            const response = await fetch(`https://localhost:7039/api/Document/GetLeaveTypes`);
            if (response.ok) {
                const data = await response.json();

                setleavetpyeState(data)
            } else {
                console.warn("‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ü‡∏≠‡∏£‡πå‡∏°‡∏ó‡∏µ‡πà‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å");

            }
        } catch (error) {
            console.error("Error fetching saved forms:", error);
        }
    }
    const fetchRoles = async () => {

        try {
            const response = await fetch(`https://localhost:7039/api/Document/GetRoles`);
            if (response.ok) {
                const data = await response.json();
                setrolesState(data)
            } else {
                console.warn("‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ü‡∏≠‡∏£‡πå‡∏°‡∏ó‡∏µ‡πà‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å");

            }
        } catch (error) {
            console.error("Error fetching saved forms:", error);
        }
    }
    const handleChange = (e) => {

        const { name, value } = e.target;
        // console.log(value)
        setFormData((prevData) => ({
            ...prevData,
            [name]: value,
        }));
    };

    // ‚úÖ ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÑ‡∏ß‡πâ‡∏à‡∏≤‡∏Å Local Storage ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÄ‡∏õ‡∏¥‡∏î‡∏´‡∏ô‡πâ‡∏≤
    useEffect(() => {
        const storedForms = localStorage.getItem("savedForms");
        if (storedForms) {
            setSavedForms(JSON.parse(storedForms));
        }
    }, []);

    // ‚úÖ ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï Local Storage ‡∏ó‡∏∏‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏ó‡∏µ‡πà savedForms ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á
    useEffect(() => {
        localStorage.setItem("savedForms", JSON.stringify(savedForms));
    }, [savedForms]);

    const fetchSavedForms = async () => {
        if (!userId) {
            alert("‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ü‡∏≠‡∏£‡πå‡∏°‡πÑ‡∏î‡πâ ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡∏≠‡∏á‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö‡πÉ‡∏´‡∏°‡πà");
            return;
        }

        try {
            const response = await fetch(`https://localhost:7039/api/Document/GetDocumentsByUser/${userId}`);
            if (response.ok) {
                const data = await response.json();
                setSavedForms(data);
            } else {
                console.warn("‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ü‡∏≠‡∏£‡πå‡∏°‡∏ó‡∏µ‡πà‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å");
                setSavedForms([]); // ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡∏≠‡∏≤‡∏£‡πå‡πÄ‡∏£‡∏¢‡πå‡∏ß‡πà‡∏≤‡∏á‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
            }
        } catch (error) {
            console.error("Error fetching saved forms:", error);
        }
    };
    const handleSaveForm = () => {
        if (!formData.fullname || !formData.leaveTypeId) {
            alert("‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡πâ‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô");
            return;
        }

        const newForm = {
            ...formData,
            id: Date.now(),
        };

        const updatedForms = [...savedForms, newForm];
        setSavedForms(updatedForms);
        localStorage.setItem("savedForms", JSON.stringify(updatedForms));

        // ‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡∏ü‡∏≠‡∏£‡πå‡∏°
        setFormData({
            userid: userId,
            leaveTypeId: "",
            createdate: "",
            fullname: "",
            rolesid: "",
            reason: "",
            startdate: "",
            enddate: "",
            totalleave: 0,
            leavedType: "",
            leaved_startdate: "",
            leaved_enddate: "",
            totalleaved: 0,
            friendeContact: "",
            contact: "",
            workingstart: "",
            approvedDate: "",
            hrApprovedDate: "",
            sentToHRDate: "",
            hrSignature: "",
            managerName: "",
            managerComment: "",
        });

        // ‡πÅ‡∏™‡∏î‡∏á Notification ‡∏ß‡πà‡∏≤‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à
        setNotificationMessage("‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏ü‡∏≠‡∏£‡πå‡∏°‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß");
        setNotificationModalOpen(true);
    };

    const handleViewForm = (form) => {
        setFormData(form);
    };
    const handleSubmit = async (e) => {
        e.preventDefault(); // ‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡πÇ‡∏´‡∏•‡∏î‡∏´‡∏ô‡πâ‡∏≤‡πÉ‡∏´‡∏°‡πà

        try {
            if (!userId) {
                alert("‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏£‡∏∞‡∏ö‡∏∏‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô‡πÑ‡∏î‡πâ ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡∏≠‡∏á‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö‡πÉ‡∏´‡∏°‡πà");
                return;
            }

            const response = await fetch("https://localhost:7039/api/Document/SubmitForm", {
                method: "POST",
                headers: { "Content-Type": "application/json" },
                body: JSON.stringify({ UserID: userId, ...formData })
            });

            if (response.ok) {
                setNotificationMessage("‚úÖ ‡∏™‡πà‡∏á‡∏ü‡∏≠‡∏£‡πå‡∏°‡πÑ‡∏õ‡∏¢‡∏±‡∏á‡∏ú‡∏π‡πâ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏ó‡∏±‡πà‡∏ß‡πÑ‡∏õ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!");
                setNotificationModalOpen(true);
                setFormData({ ...formData, status: "submitted" }); // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏ü‡∏≠‡∏£‡πå‡∏°
            } else {
                alert("‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á‡∏ü‡∏≠‡∏£‡πå‡∏°");
            }
        } catch (error) {
            console.error("Error:", error);
            alert("‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á‡∏ü‡∏≠‡∏£‡πå‡∏°");
        }
    };


    const handleSubmitToGM = async (form) => {
        if (!form || !form.ID) {
            alert("‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ü‡∏≠‡∏£‡πå‡∏°‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà");
            return;
        }

        const approvalData = {
            DocumentID: form.ID,
            ManagerName: "GM ‡∏ä‡∏∑‡πà‡∏≠‡∏à‡∏£‡∏¥‡∏á",  // ‡πÅ‡∏Å‡πâ‡πÄ‡∏õ‡πá‡∏ô‡∏ä‡∏∑‡πà‡∏≠‡∏à‡∏£‡∏¥‡∏á‡∏Ç‡∏≠‡∏á GM
            ManagerComment: "‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡∏•‡∏≤",
        };

        try {
            const response = await fetch("https://localhost:7039/api/Document/ApproveByManager", {
                method: "POST",
                headers: { "Content-Type": "application/json" },
                body: JSON.stringify(approvalData),
            });

            if (response.ok) {
                alert("‡∏™‡πà‡∏á‡∏ü‡∏≠‡∏£‡πå‡∏°‡πÑ‡∏õ‡∏¢‡∏±‡∏á GM ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!");
            } else {
                const errorText = await response.text();
                console.error("Server error:", errorText);
                alert("‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: " + errorText);
            }
        } catch (error) {
            console.error("Error:", error);
            alert("‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á‡∏ü‡∏≠‡∏£‡πå‡∏°");
        }
    };

    const sendFrom = async () => {
        const confirmSend = window.confirm("üì¢ ‡∏Ñ‡∏∏‡∏ì‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á‡∏ü‡∏≠‡∏£‡πå‡∏°‡∏ô‡∏µ‡πâ‡πÑ‡∏õ‡∏¢‡∏±‡∏á‡∏´‡∏±‡∏ß‡∏´‡∏ô‡πâ‡∏≤‡∏à‡∏£‡∏¥‡∏á‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà?");
        if (!confirmSend) return;

        try {
            console.log("‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏™‡πà‡∏á‡∏ü‡∏≠‡∏£‡πå‡∏°:", formData);

            const response = await fetch("https://localhost:7039/api/Document/CreateDocument", {
                method: "POST",
                headers: { "Content-Type": "application/json" },
                body: JSON.stringify(formData),
            });

            if (response.ok) {
                const result = await response.json();
                console.log("üìå ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏ü‡∏≠‡∏£‡πå‡∏°‡∏•‡∏á‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à:", result);

                setNotificationMessage("‚úÖ ‡∏ü‡∏≠‡∏£‡πå‡∏°‡∏ñ‡∏π‡∏Å‡∏™‡πà‡∏á‡πÑ‡∏õ‡∏¢‡∏±‡∏á‡∏´‡∏±‡∏ß‡∏´‡∏ô‡πâ‡∏≤‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!");
                setNotificationModalOpen(true);
            } else {
                const errorText = await response.text();
                console.error("Server error:", errorText);
                alert("‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: " + errorText);
            }
        } catch (error) {
            console.error("Error:", error);
            alert("‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á‡∏ü‡∏≠‡∏£‡πå‡∏°");
        }
    };

    const handleDeleteForm = (formId) => {
        const updatedForms = savedForms.filter((form) => form.id !== formId);
        setSavedForms(updatedForms);
        localStorage.setItem("savedForms", JSON.stringify(updatedForms));
    };

    const handleGeneratePDF = () => {
        // Helper function ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏õ‡∏•‡∏á‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡πá‡∏ô‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö DD/MM/YYYY
        const formatDate = (date) => {
            if (!date) return "-"; // ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÉ‡∏´‡πâ‡πÅ‡∏™‡∏î‡∏á "-"
            const options = { year: "numeric", month: "2-digit", day: "2-digit" };
            return new Intl.DateTimeFormat("th-TH", options).format(new Date(date));
        };

        const docDefinition = {
            content: [
                { text: "‡πÅ‡∏ö‡∏ö‡∏ü‡∏≠‡∏£‡πå‡∏°‡πÉ‡∏ö‡∏•‡∏≤", style: "header" },
                {
                    text: `‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà : ${formatDate(formData.createdate)}`,
                    margin: [0, 10, 0, 10],
                    alignment: 'right' // ‡∏ó‡∏≥‡πÉ‡∏´‡πâ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ä‡∏¥‡∏î‡∏Ç‡∏ß‡∏≤
                },
                { text: `‡πÄ‡∏£‡∏∑‡πà‡∏≠‡∏á : ‡∏Ç‡∏≠‡∏≠‡∏ô‡∏∏‡∏ç‡∏≤‡∏ï‡∏¥‡∏•‡∏≤ : ${leaveTypeName}`, margin: [0, 10, 0, 10] },
                { text: `‡πÄ‡∏£‡∏µ‡∏¢‡∏ô ‡∏´‡∏±‡∏ß‡∏´‡∏ô‡πâ‡∏≤‡πÅ‡∏ú‡∏ô‡∏Å/‡∏ù‡πà‡∏≤‡∏¢‡∏ö‡∏∏‡∏Ñ‡∏Ñ‡∏•`, margin: [0, 10, 0, 10] },
                {
                    table: {
                        widths: ["auto", "*"],
                        body: [
                            ["‡∏Ç‡πâ‡∏≤‡∏û‡πÄ‡∏à‡πâ‡∏≤ :", `${formData.fullname || "-"} ‡πÅ‡∏ú‡∏ô‡∏Å ${roleName}`],
                            ["‡∏Ç‡∏≠‡∏•‡∏≤ :", `${leaveTypeName} ‡πÄ‡∏ô‡∏∑‡πà‡∏≠‡∏á‡∏à‡∏≤‡∏Å ${formData.reason || "-"}`],
                            [
                                "‡∏ï‡∏±‡πâ‡∏á‡πÅ‡∏ï‡πà‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà :",
                                `${formatDate(formData.startdate)} ‡∏ñ‡∏∂‡∏á‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà : ${formatDate(formData.enddate)} ‡∏£‡∏ß‡∏° : ${formData.totalleave || "0"} ‡∏ß‡∏±‡∏ô`
                            ],
                            [
                                "‡∏Ç‡πâ‡∏≤‡∏û‡πÄ‡∏à‡πâ‡∏≤‡πÑ‡∏î‡πâ‡∏•‡∏≤ :",
                                `${leavedTypeName} ‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏™‡∏∏‡∏î‡∏ó‡πâ‡∏≤‡∏¢ ‡∏ï‡∏±‡πâ‡∏á‡πÅ‡∏ï‡πà‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà : ${formatDate(formData.leaved_startdate)} ‡∏ñ‡∏∂‡∏á‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà : ${formatDate(formData.leaved_enddate)} ‡∏£‡∏ß‡∏° ${formData.totalleaved || "0"} ‡∏ß‡∏±‡∏ô`
                            ],
                        ],
                    },
                    layout: "noBorders",
                    margin: [0, 0, 0, 20],
                },
                {
                    table: {
                        widths: ["auto", "*"],
                        body: [
                            [
                                "‡πÉ‡∏ô‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á‡∏•‡∏≤ ‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠‡∏Ç‡πâ‡∏≤‡∏û‡πÄ‡∏à‡πâ‡∏≤‡πÑ‡∏î‡πâ‡∏ó‡∏µ‡πà :",
                                `${formData.friendeContact || "-"}, ‡πÄ‡∏ö‡∏≠‡∏£‡πå‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠ ${formData.contact || "-"}`
                            ],
                        ],
                    },
                    layout: "noBorders",
                    margin: [0, 0, 0, 20],
                },
                {
                    text: [
                        { text: "‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡∏•‡∏≤‡πÉ‡∏ô‡∏õ‡∏µ‡∏ô‡∏µ‡πâ (‡∏ß‡∏±‡∏ô‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏á‡∏≤‡∏ô)", style: "subheader" },
                        { text: ` ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà: ${formatDate(formData.workingstart)}`, style: "subheader" }
                    ]
                },
                {
                    table: {
                        widths: ["auto", "*", "*", "*"],
                        body: [
                            [
                                { text: "‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏•‡∏≤", alignment: 'center' },
                                { text: "‡∏•‡∏≤‡∏°‡∏≤‡πÅ‡∏•‡πâ‡∏ß", alignment: 'center' },
                                { text: "‡∏•‡∏≤‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏ô‡∏µ‡πâ", alignment: 'center' },
                                { text: "‡∏£‡∏ß‡∏°‡πÄ‡∏õ‡πá‡∏ô", alignment: 'center' }
                            ],
                            [
                                { text: "‡∏õ‡πà‡∏ß‡∏¢", alignment: 'center' },
                                { text: formData.historyleave || "-", alignment: 'center' },
                                { text: formData.historyleave || "-", alignment: 'center' },
                                { text: formData.historyleave || "-", alignment: 'center' }
                            ],
                            [
                                { text: "‡∏Å‡∏¥‡∏à‡∏™‡πà‡∏ß‡∏ô‡∏ï‡∏±‡∏ß", alignment: 'center' },
                                { text: formData.historyleave || "-", alignment: 'center' },
                                { text: formData.historyleave || "-", alignment: 'center' },
                                { text: formData.historyleave || "-", alignment: 'center' }
                            ],
                            [
                                { text: "‡∏û‡∏±‡∏Å‡∏£‡πâ‡∏≠‡∏ô", alignment: 'center' },
                                { text: formData.historyleave || "-", alignment: 'center' },
                                { text: formData.historyleave || "-", alignment: 'center' },
                                { text: formData.historyleave || "-", alignment: 'center' }
                            ],
                            [
                                { text: "‡∏Ñ‡∏•‡∏≠‡∏î‡∏ö‡∏∏‡∏ï‡∏£", alignment: 'center' },
                                { text: formData.historyleave || "-", alignment: 'center' },
                                { text: formData.historyleave || "-", alignment: 'center' },
                                { text: formData.historyleave || "-", alignment: 'center' }
                            ],
                            [
                                { text: "‡∏ö‡∏ß‡∏ä", alignment: 'center' },
                                { text: formData.historyleave || "-", alignment: 'center' },
                                { text: formData.historyleave || "-", alignment: 'center' },
                                { text: formData.historyleave || "-", alignment: 'center' }
                            ]
                        ]
                    },
                    margin: [0, 0, 0, 20]
                },
                {
                    text: `‡∏Ç‡∏≠‡πÅ‡∏™‡∏î‡∏á‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ô‡∏±‡∏ö‡∏ñ‡∏∑‡∏≠`,
                    margin: [0, 10, 0, 0],
                    alignment: 'right' // ‡∏ó‡∏≥‡πÉ‡∏´‡πâ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ä‡∏¥‡∏î‡∏Ç‡∏ß‡∏≤
                },
                {
                    columns: [
                        {
                            width: '33%',  // ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Å‡∏ß‡πâ‡∏≤‡∏á‡πÉ‡∏´‡πâ‡πÄ‡∏õ‡πá‡∏ô 1/3 ‡∏Ç‡∏≠‡∏á‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà
                            text: `‡∏•‡∏á‡∏ä‡∏∑‡πà‡∏≠:  ...............................‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô`,
                            alignment: 'center',
                            margin: [0, 10, 0, 0]
                        },
                        {
                            width: '33%',
                            text: `‡∏•‡∏á‡∏ä‡∏∑‡πà‡∏≠:  ............................‡∏´‡∏±‡∏ß‡∏´‡∏ô‡πâ‡∏≤‡πÅ‡∏ú‡∏ô‡∏Å`,
                            alignment: 'center',
                            margin: [0, 10, 0, 0]
                        },
                        {
                            width: '33%',
                            text: `‡∏•‡∏á‡∏ä‡∏∑‡πà‡∏≠:  ...............................‡∏ú‡∏π‡πâ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö`,
                            alignment: 'center',
                            margin: [0, 10, 0, 0]
                        }
                    ]
                },
                {
                    columns: [
                        {
                            width: '33%',  // ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Å‡∏ß‡πâ‡∏≤‡∏á‡πÉ‡∏´‡πâ‡πÄ‡∏õ‡πá‡∏ô 1/3 ‡∏Ç‡∏≠‡∏á‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà
                            text: `(..............................)`,
                            alignment: 'center',
                            margin: [0, 10, 0, 0]
                        },
                        {
                            width: '33%',  // ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Å‡∏ß‡πâ‡∏≤‡∏á‡πÉ‡∏´‡πâ‡πÄ‡∏õ‡πá‡∏ô 1/3 ‡∏Ç‡∏≠‡∏á‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà
                            text: `(..............................)`,
                            alignment: 'center',
                            margin: [0, 10, 0, 0]
                        },
                        {
                            width: '33%',  // ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Å‡∏ß‡πâ‡∏≤‡∏á‡πÉ‡∏´‡πâ‡πÄ‡∏õ‡πá‡∏ô 1/3 ‡∏Ç‡∏≠‡∏á‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà
                            text: `(..............................)`,
                            alignment: 'center',
                            margin: [0, 10, 0, 0]
                        }
                    ]
                },
                {
                    columns: [
                        {
                            width: '33%',
                            text: `‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà ......../......../.........`,
                            alignment: 'center',
                            margin: [0, 10, 0, 0]
                        },
                        {
                            width: '33%',
                            text: `‡πÅ‡∏ú‡∏ô‡∏Å........................`,
                            alignment: 'center',
                            margin: [0, 10, 0, 0]
                        },
                        {
                            width: '33%',
                            text: `‡πÅ‡∏ú‡∏ô‡∏Å........................`,
                            alignment: 'center',
                            margin: [0, 10, 0, 0]
                        }
                    ]
                },
                {
                    columns: [
                        {
                            width: '33%',
                            text: ``,
                            alignment: 'center',
                            margin: [0, 10, 0, 0]
                        },
                        {
                            width: '33%',
                            text: `‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà ......../......../.........`,
                            alignment: 'center',
                            margin: [0, 10, 0, 0]
                        },
                        {
                            width: '33%',
                            text: `‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà ......../......../.........`,
                            alignment: 'center',
                            margin: [0, 10, 0, 0]
                        }
                    ]
                },
            ],
            styles: {
                header: {
                    fontSize: 18,
                    bold: true,
                    alignment: "center"
                },
                subheader: {
                    fontSize: 18,
                    bold: true,
                    margin: [0, 10, 0, 5]
                }
            },
            defaultStyle: {
                font: "THSarabunNew",
                fontSize: 16, // ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏Ç‡∏ô‡∏≤‡∏î‡∏ü‡πâ‡∏≠‡∏ô‡∏ï‡πå‡πÄ‡∏õ‡πá‡∏ô 16
            },
        };

        pdfMake.createPdf(docDefinition).download("‡πÅ‡∏ö‡∏ö‡∏ü‡∏≠‡∏£‡πå‡∏°‡πÉ‡∏ö‡∏•‡∏≤.pdf");
    };

    return (

        <div className="">
            <div className="flex justify-start gap-4 mb-4">
                <Link
                    to="/EmpHome/Document"
                    className="btn btn-outline font-FontNoto"
                >
                    ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£
                </Link>
                <Link
                    to="/EmpHome/LeaveForm"
                    className="btn btn-outline font-FontNoto"
                >
                    ‡∏ü‡∏≠‡∏£‡πå‡∏°‡πÉ‡∏ö‡∏•‡∏≤
                </Link>
                <Link
                    to="/EmpHome/EmployeeView"
                    className="btn btn-outline font-FontNoto"
                >
                    ‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£‡πÉ‡∏ö‡∏•‡∏≤‡∏à‡∏≤‡∏Å HR
                </Link>
            </div>
            <div className="p-6 max-w-4xl mx-auto bg-white text-black rounded-xl shadow-md space-y-4">
                <h2 className="text-2xl  font-bold text-center font-FontNoto">‡πÅ‡∏ö‡∏ö‡∏ü‡∏≠‡∏£‡πå‡∏°‡πÉ‡∏ö‡∏•‡∏≤</h2>
                <form className="space-y-4">
                    <div className="flex items-center justify-end gap-2">
                        <label className="label">
                            <span className="label-text font-FontNoto">‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà :</span>
                        </label>
                        <input
                            type="date"
                            name="createdate"
                            value={formData.createdate || ""} // ‡πÉ‡∏ä‡πâ "" ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏Ñ‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô undefined
                            className="input input-bordered font-FontNoto"
                            onChange={handleChange}
                            style={{
                                colorScheme: "light", // ‡∏ö‡∏±‡∏á‡∏Ñ‡∏±‡∏ö‡πÑ‡∏≠‡∏Ñ‡∏≠‡∏ô‡πÉ‡∏´‡πâ‡πÉ‡∏ä‡πâ‡πÇ‡∏´‡∏°‡∏î‡∏™‡∏ß‡πà‡∏≤‡∏á
                            }}
                        />
                    </div>
                    <div className="grid grid-cols-1 gap-4">
                        <div style={{ display: 'flex', alignItems: 'center', gap: '8px' }}>
                            <label className="label">
                                <span className="label-text font-FontNoto">‡πÄ‡∏£‡∏∑‡πà‡∏≠‡∏á : ‡∏Ç‡∏≠‡∏≠‡∏ô‡∏∏‡∏ç‡∏≤‡∏ï‡∏¥‡∏•‡∏≤</span>
                            </label>

                            <select
                                name="leaveTypeId"
                                className="input input-bordered font-FontNoto"
                                value={formData.leaveTypeId}
                                onChange={handleChange}
                            >
                                <option value="" className="font-FontNoto">-- ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏Å‡∏≤‡∏£‡∏•‡∏≤ --</option>
                                {leavetpyeState.map((item) => (
                                    <option key={item.leaveTypeid} value={item.leaveTypeid} className="font-FontNoto">
                                        {item.leaveTypeTh}
                                    </option>
                                ))}
                            </select>

                        </div>
                        <div style={{ display: 'flex', alignItems: 'center', gap: '8px' }}>
                            <label className="label">
                                <span className="label-text font-FontNoto">‡πÄ‡∏£‡∏µ‡∏¢‡∏ô ‡∏´‡∏±‡∏ß‡∏´‡∏ô‡πâ‡∏≤‡πÅ‡∏ú‡∏ô‡∏Å/‡∏ù‡πà‡∏≤‡∏¢‡∏ö‡∏∏‡∏Ñ‡∏Ñ‡∏•</span>
                            </label>
                        </div>
                        <div style={{ display: 'flex', alignItems: 'center', gap: '16px' }}>

                            <div style={{ display: 'flex', alignItems: 'center', gap: '8px' }}>
                                <label className="label" style={{ whiteSpace: 'nowrap' }}>
                                    <span className="label-text font-FontNoto">‡∏Ç‡πâ‡∏≤‡∏û‡πÄ‡∏à‡πâ‡∏≤ :</span>
                                </label>
                                <input
                                    type="text"
                                    name="fullname"
                                    className="input input-bordered font-FontNoto"
                                    value={formData.fullname} // ‡∏Ñ‡∏ß‡∏ö‡∏Ñ‡∏∏‡∏°‡∏Ñ‡πà‡∏≤‡πÇ‡∏î‡∏¢ state
                                    onChange={handleChange} // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏†‡∏≤‡∏©‡∏≤‡πÑ‡∏ó‡∏¢
                                    style={{ width: '300px' }}
                                />
                            </div>

                            <div style={{ display: 'flex', alignItems: 'center', gap: '8px' }}>
                                <label className="label" style={{ whiteSpace: 'nowrap' }}>
                                    <span className="label-text font-FontNoto">‡πÅ‡∏ú‡∏ô‡∏Å :</span>
                                </label>
                                <select
                                    name="rolesid"
                                    className="input input-bordered font-FontNoto" // ‡πÄ‡∏û‡∏¥‡πà‡∏° class ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏ü‡∏≠‡∏ô‡∏ï‡πå
                                    value={formData.rolesid}
                                    onChange={handleChange}
                                    style={{ width: '300px' }}
                                >
                                    <option value="" className="font-FontNoto">-- ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÅ‡∏ú‡∏ô‡∏Å --</option>
                                    {rolesState.map((item) => (
                                        <option key={item.rolesid} value={item.rolesid} className="font-FontNoto">
                                            {item.rolesname}
                                        </option>
                                    ))}
                                </select>
                            </div>

                        </div>
                    </div>
                    <div style={{ display: 'flex', alignItems: 'center', gap: '16px' }}>
                        <label className="label">
                            <span className="label-text font-FontNoto">‡∏Ç‡∏≠‡∏•‡∏≤ :</span>
                        </label>

                        {
                            leavetpyeState.map((item) => (
                                <label key={item.leaveTypeid} className="flex items-center gap-2">
                                    <input
                                        type="radio"
                                        name="leaveTypeId"
                                        value={item.leaveTypeid}
                                        checked={formData.leaveTypeId == item.leaveTypeid} // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞
                                        className="radio"
                                        onChange={handleChange}
                                    />
                                    <span className="font-FontNoto" style={{ color: 'black' }}>{item.leaveTypeTh}</span>
                                </label>
                            ))}
                    </div>

                    <div style={{ display: 'flex', alignItems: 'center', gap: '8px' }}>
                        <label className="label" style={{ whiteSpace: 'nowrap' }}>
                            <span className="label-text font-FontNoto">‡πÄ‡∏ô‡∏∑‡πà‡∏≠‡∏á‡∏à‡∏≤‡∏Å :</span>
                        </label>
                        <input
                            type="text"
                            name="reason"
                            className="input input-bordered font-FontNoto"
                            value={formData.reason} // ‡∏Ñ‡∏ß‡∏ö‡∏Ñ‡∏∏‡∏°‡∏Ñ‡πà‡∏≤‡πÇ‡∏î‡∏¢ state
                            onChange={handleChange} // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏†‡∏≤‡∏©‡∏≤‡πÑ‡∏ó‡∏¢
                            style={{ width: '800px' }} // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Å‡∏ß‡πâ‡∏≤‡∏á
                        />
                    </div>
                    <div style={{ display: 'flex', alignItems: 'center', gap: '16px' }}>
                        <label className="label" style={{ whiteSpace: 'nowrap' }}>
                            <span className="label-text font-FontNoto">‡∏ï‡∏±‡πâ‡∏á‡πÅ‡∏ï‡πà‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà :</span>
                        </label>
                        <input type="date" name="startdate" value={formData.startdate || ''} className="input input-bordered font-FontNoto" onChange={handleChange} style={{
                            colorScheme: "light",
                        }} />

                        <label className="label" style={{ whiteSpace: 'nowrap' }}>
                            <span className="label-text font-FontNoto">‡∏ñ‡∏∂‡∏á‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà :</span>
                        </label>
                        <input type="date" name="enddate" value={formData.enddate || ''} className="input input-bordered font-FontNoto" onChange={handleChange} style={{
                            colorScheme: "light",
                        }} />

                        <label className="label" style={{ whiteSpace: 'nowrap' }}>
                            <span className="label-text font-FontNoto">‡∏°‡∏µ‡∏Å‡∏≥‡∏´‡∏ô‡∏î :</span>
                        </label>
                        <div className="flex items-center">
                            <input
                                type="number"
                                name="total_start_leave"
                                className="input input-bordered mr-2"
                                value={formData.totalleave || ''} // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ñ‡πà‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏´‡∏•‡∏µ‡∏Å‡πÄ‡∏•‡∏µ‡πà‡∏¢‡∏á undefined
                                onChange={(e) => {
                                    const value = Math.max(0, Number(e.target.value)); // ‡πÉ‡∏ä‡πâ Number ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÅ‡∏õ‡∏•‡∏á‡∏Ñ‡πà‡∏≤
                                    setFormData((prevData) => ({
                                        ...prevData,
                                        totalleave: value, // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ñ‡πà‡∏≤‡πÉ‡∏ô state
                                    }));
                                }}
                                min="0" // ‡∏à‡∏≥‡∏Å‡∏±‡∏î‡∏Ñ‡πà‡∏≤‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡πà‡∏≥‡πÄ‡∏õ‡πá‡∏ô 0
                                style={{ width: '40%' }}
                            />

                            <span className="font-FontNoto">‡∏ß‡∏±‡∏ô</span>
                        </div>
                    </div>
                    <div style={{ display: 'flex', alignItems: 'center', gap: '16px' }}>
                        <label className="label">
                            <span className="label-text font-FontNoto">‡∏Ç‡πâ‡∏≤‡∏û‡πÄ‡∏à‡πâ‡∏≤‡πÑ‡∏î‡πâ‡∏•‡∏≤ :</span>
                        </label>
                        {
                            leavetpyeState.map((item) => (
                                <label key={item.leaveTypeid} className="flex items-center gap-2">
                                    <input
                                        type="radio"
                                        name="leavedType"
                                        value={item.leaveTypeid}
                                        checked={formData.leavedType == item.leaveTypeid} // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞
                                        className="radio"
                                        onChange={handleChange}
                                    />
                                    <span className="font-FontNoto" style={{ color: 'black' }}>{item.leaveTypeTh}</span>
                                </label>
                            ))}
                    </div>

                    <div style={{ display: 'flex', alignItems: 'center', gap: '16px' }}>
                        <label className="label" style={{ whiteSpace: 'nowrap' }}>
                            <span className="label-text font-FontNoto">‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏™‡∏∏‡∏î‡∏ó‡πâ‡∏≤‡∏¢ ‡∏ï‡∏±‡πâ‡∏á‡πÅ‡∏ï‡πà‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà :</span>
                        </label>
                        <input type="date" name="leaved_startdate" value={formData.leaved_startdate || ''} className="input input-bordered font-FontNoto" onChange={handleChange} style={{
                            colorScheme: "light",
                        }} />

                        <label className="label" style={{ whiteSpace: 'nowrap' }}>
                            <span className="label-text font-FontNoto">‡∏ñ‡∏∂‡∏á‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà :</span>
                        </label>
                        <input type="date" name="leaved_enddate" value={formData.leaved_enddate || ''} className="input input-bordered font-FontNoto" onChange={handleChange} style={{
                            colorScheme: "light",
                        }} />

                        <div style={{ display: 'flex', alignItems: 'center', gap: '8px' }}>
                            <label className="label" style={{ whiteSpace: 'nowrap' }}>
                                <span className="label-text font-FontNoto">‡∏°‡∏µ‡∏Å‡∏≥‡∏´‡∏ô‡∏î :</span>
                            </label>
                            <div className="flex items-center">
                                <input
                                    type="number"
                                    name="totalleaved"
                                    className="input input-bordered mr-2"
                                    value={formData.totalleaved || ''} // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ñ‡πà‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏´‡∏•‡∏µ‡∏Å‡πÄ‡∏•‡∏µ‡πà‡∏¢‡∏á undefined
                                    onChange={handleChange}
                                    min="0" // ‡∏à‡∏≥‡∏Å‡∏±‡∏î‡∏Ñ‡πà‡∏≤‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡πà‡∏≥‡πÄ‡∏õ‡πá‡∏ô 0
                                    style={{ width: '50%' }}
                                />

                                <span className="font-FontNoto">‡∏ß‡∏±‡∏ô</span>
                            </div>

                        </div>
                    </div>
                    <div className="flex flex-col gap-4">
                        <div className="flex items-center gap-2">
                            <label className="label">
                                <span className="label-text font-FontNoto">‡πÉ‡∏ô‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á‡∏•‡∏≤ ‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠‡∏Ç‡πâ‡∏≤‡∏û‡πÄ‡∏à‡πâ‡∏≤‡πÑ‡∏î‡πâ‡∏ó‡∏µ‡πà :</span>
                            </label>
                            <input
                                type="text"
                                name="friendeContact"
                                className="input input-bordered flex-1 font-FontNoto"
                                value={formData.friendeContact}
                                onChange={handleChange} // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏†‡∏≤‡∏©‡∏≤‡πÑ‡∏ó‡∏¢‡πÅ‡∏•‡∏∞‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç
                            />
                            <label className="label">
                                <span className="label-text font-FontNoto">‡πÄ‡∏ö‡∏≠‡∏£‡πå‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠ :</span>
                            </label>
                            <input
                                type="text"
                                name="contact"
                                className="input input-bordered flex-1 font-FontNoto"
                                value={formData.contact} // ‡∏Ñ‡∏ß‡∏ö‡∏Ñ‡∏∏‡∏°‡∏Ñ‡πà‡∏≤‡πÇ‡∏î‡∏¢ state
                                onChange={handleChange} // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç 10 ‡∏ï‡∏±‡∏ß
                                maxLength="10" // ‡∏à‡∏≥‡∏Å‡∏±‡∏î‡∏Ñ‡∏ß‡∏≤‡∏°‡∏¢‡∏≤‡∏ß‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î 10 ‡∏ï‡∏±‡∏ß‡∏≠‡∏±‡∏Å‡∏©‡∏£
                            />
                        </div>
                    </div>
                    <div className="flex items-center gap-4">
                        <h2 className="text-lg font-bold font-FontNoto">
                            ‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡∏•‡∏≤‡πÉ‡∏ô‡∏õ‡∏µ‡∏ô‡∏µ‡πâ (‡∏ß‡∏±‡∏ô‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏á‡∏≤‡∏ô)
                        </h2>
                        <input
                            type="date"
                            name="workingstart"
                            value={formData.workingstart || ''}
                            className="input input-bordered font-FontNoto"
                            onChange={handleChange}
                            style={{
                                colorScheme: "light", // ‡∏ö‡∏±‡∏á‡∏Ñ‡∏±‡∏ö‡πÑ‡∏≠‡∏Ñ‡∏≠‡∏ô‡πÉ‡∏´‡πâ‡πÉ‡∏ä‡πâ‡πÇ‡∏´‡∏°‡∏î‡∏™‡∏ß‡πà‡∏≤‡∏á
                            }}
                        />
                    </div>

                    <div className="overflow-x-auto">
                        <table className="table w-full text-center">
                            <thead className="text-center font-FontNoto">
                                <tr>
                                    <th className="font-FontNoto">‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏Å‡∏≤‡∏£‡∏•‡∏≤</th>
                                    <th className="font-FontNoto">‡∏•‡∏≤‡∏°‡∏≤‡πÅ‡∏•‡πâ‡∏ß (‡∏ß‡∏±‡∏ô)</th>
                                    <th className="font-FontNoto">‡∏•‡∏≤‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏ô‡∏µ‡πâ (‡∏ß‡∏±‡∏ô)</th>
                                    <th className="font-FontNoto">‡∏£‡∏ß‡∏° (‡∏ß‡∏±‡∏ô)</th>
                                </tr>
                            </thead>
                            <tbody>
                                <tr>
                                    <td className="font-FontNoto">‡∏õ‡πà‡∏ß‡∏¢</td>
                                    <td>
                                        <input
                                            type="number"
                                            name="sickDaysUsed"
                                            value={formData.sickDaysUsed || ''}
                                            className="input input-bordered w-full text-center font-FontNoto"
                                            maxLength="2"
                                            onChange={handleChange}
                                            onInput={(e) => {
                                                if (e.target.value < 0) e.target.value = 0;  // ‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡πÑ‡∏°‡πà‡πÉ‡∏´‡πâ‡∏Å‡∏£‡∏≠‡∏Å‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç‡∏ï‡∏¥‡∏î‡∏•‡∏ö
                                                if (e.target.value.length > 2) e.target.value = e.target.value.slice(0, 2);
                                            }}
                                        />
                                    </td>
                                    <td>
                                        <input
                                            type="number"
                                            name="sickDaysCurrent"
                                            value={formData.sickDaysCurrent || ''}
                                            className="input input-bordered w-full text-center font-FontNoto"
                                            maxLength="2"
                                            onChange={handleChange}
                                            onInput={(e) => {
                                                if (e.target.value < 0) e.target.value = 0;  // ‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡πÑ‡∏°‡πà‡πÉ‡∏´‡πâ‡∏Å‡∏£‡∏≠‡∏Å‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç‡∏ï‡∏¥‡∏î‡∏•‡∏ö
                                                if (e.target.value.length > 2) e.target.value = e.target.value.slice(0, 2);
                                            }}
                                        />
                                    </td>
                                    <td>
                                        <input
                                            type="number"
                                            name="sickDaysTotal"
                                            value={formData.sickDaysTotal || ''}
                                            className="input input-bordered w-full text-center font-FontNoto"
                                            maxLength="2"
                                            onChange={handleChange}
                                            onInput={(e) => {
                                                if (e.target.value < 0) e.target.value = 0;  // ‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡πÑ‡∏°‡πà‡πÉ‡∏´‡πâ‡∏Å‡∏£‡∏≠‡∏Å‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç‡∏ï‡∏¥‡∏î‡∏•‡∏ö
                                                if (e.target.value.length > 2) e.target.value = e.target.value.slice(0, 2);
                                            }}
                                        />
                                    </td>
                                </tr>

                                <tr>
                                    <td className="font-FontNoto">‡∏Å‡∏¥‡∏à‡∏™‡πà‡∏ß‡∏ô‡∏ï‡∏±‡∏ß</td>
                                    <td>
                                        <input
                                            type="number"
                                            name="personalDaysUsed"
                                            value={formData.personalDaysUsed || ''}
                                            className="input input-bordered w-full text-center font-FontNoto"
                                            maxLength="2"
                                            onChange={handleChange}
                                            onInput={(e) => {
                                                if (e.target.value < 0) e.target.value = 0;  // ‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡πÑ‡∏°‡πà‡πÉ‡∏´‡πâ‡∏Å‡∏£‡∏≠‡∏Å‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç‡∏ï‡∏¥‡∏î‡∏•‡∏ö
                                                if (e.target.value.length > 2) e.target.value = e.target.value.slice(0, 2);
                                            }}
                                        />
                                    </td>
                                    <td>
                                        <input
                                            type="number"
                                            name="personalDaysCurrent"
                                            value={formData.personalDaysCurrent || ''}
                                            className="input input-bordered w-full text-center font-FontNoto"
                                            maxLength="2"
                                            onChange={handleChange}
                                            onInput={(e) => {
                                                if (e.target.value < 0) e.target.value = 0;  // ‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡πÑ‡∏°‡πà‡πÉ‡∏´‡πâ‡∏Å‡∏£‡∏≠‡∏Å‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç‡∏ï‡∏¥‡∏î‡∏•‡∏ö
                                                if (e.target.value.length > 2) e.target.value = e.target.value.slice(0, 2);
                                            }}
                                        />
                                    </td>
                                    <td>
                                        <input
                                            type="number"
                                            name="personalDaysTotal"
                                            value={formData.personalDaysTotal || ''}
                                            className="input input-bordered w-full text-center font-FontNoto"
                                            maxLength="2"
                                            onChange={handleChange}
                                            onInput={(e) => {
                                                if (e.target.value < 0) e.target.value = 0;  // ‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡πÑ‡∏°‡πà‡πÉ‡∏´‡πâ‡∏Å‡∏£‡∏≠‡∏Å‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç‡∏ï‡∏¥‡∏î‡∏•‡∏ö
                                                if (e.target.value.length > 2) e.target.value = e.target.value.slice(0, 2);
                                            }}
                                        />
                                    </td>
                                </tr>

                                <tr>
                                    <td className="font-FontNoto">‡∏û‡∏±‡∏Å‡∏£‡πâ‡∏≠‡∏ô</td>
                                    <td>
                                        <input
                                            type="number"
                                            name="vacationDaysUsed"
                                            value={formData.vacationDaysUsed || ''}
                                            className="input input-bordered w-full text-center font-FontNoto"
                                            maxLength="2"
                                            onChange={handleChange}
                                            onInput={(e) => {
                                                if (e.target.value < 0) e.target.value = 0;  // ‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡πÑ‡∏°‡πà‡πÉ‡∏´‡πâ‡∏Å‡∏£‡∏≠‡∏Å‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç‡∏ï‡∏¥‡∏î‡∏•‡∏ö
                                                if (e.target.value.length > 2) e.target.value = e.target.value.slice(0, 2);
                                            }}
                                        />
                                    </td>
                                    <td>
                                        <input
                                            type="number"
                                            name="vacationDaysCurrent"
                                            value={formData.vacationDaysCurrent || ''}
                                            className="input input-bordered w-full text-center font-FontNoto"
                                            maxLength="2"
                                            onChange={handleChange}
                                            onInput={(e) => {
                                                if (e.target.value < 0) e.target.value = 0;  // ‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡πÑ‡∏°‡πà‡πÉ‡∏´‡πâ‡∏Å‡∏£‡∏≠‡∏Å‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç‡∏ï‡∏¥‡∏î‡∏•‡∏ö
                                                if (e.target.value.length > 2) e.target.value = e.target.value.slice(0, 2);
                                            }}
                                        />
                                    </td>
                                    <td>
                                        <input
                                            type="number"
                                            name="vacationDaysTotal"
                                            value={formData.vacationDaysTotal || ''}
                                            className="input input-bordered w-full text-center font-FontNoto"
                                            maxLength="2"
                                            onChange={handleChange}
                                            onInput={(e) => {
                                                if (e.target.value < 0) e.target.value = 0;  // ‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡πÑ‡∏°‡πà‡πÉ‡∏´‡πâ‡∏Å‡∏£‡∏≠‡∏Å‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç‡∏ï‡∏¥‡∏î‡∏•‡∏ö
                                                if (e.target.value.length > 2) e.target.value = e.target.value.slice(0, 2);
                                            }}
                                        />
                                    </td>
                                </tr>
                                <tr>
                                    <td className="font-FontNoto">‡∏Ñ‡∏•‡∏≠‡∏î‡∏ö‡∏∏‡∏ï‡∏£</td>
                                    <td>
                                        <input
                                            type="number"
                                            name="maternityDaysUsed"
                                            value={formData.maternityDaysUsed || ''}
                                            className="input input-bordered w-full text-center font-FontNoto"
                                            maxLength="2"
                                            onChange={handleChange}
                                            onInput={(e) => {
                                                if (e.target.value < 0) e.target.value = 0;  // ‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡πÑ‡∏°‡πà‡πÉ‡∏´‡πâ‡∏Å‡∏£‡∏≠‡∏Å‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç‡∏ï‡∏¥‡∏î‡∏•‡∏ö
                                                if (e.target.value.length > 2) e.target.value = e.target.value.slice(0, 2);
                                            }}
                                        />
                                    </td>
                                    <td>
                                        <input
                                            type="number"
                                            name="maternityDaysCurrent"
                                            value={formData.maternityDaysCurrent || ''}
                                            className="input input-bordered w-full text-center font-FontNoto"
                                            maxLength="2"
                                            onChange={handleChange}
                                            onInput={(e) => {
                                                if (e.target.value < 0) e.target.value = 0;  // ‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡πÑ‡∏°‡πà‡πÉ‡∏´‡πâ‡∏Å‡∏£‡∏≠‡∏Å‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç‡∏ï‡∏¥‡∏î‡∏•‡∏ö
                                                if (e.target.value.length > 2) e.target.value = e.target.value.slice(0, 2);
                                            }}
                                        />
                                    </td>
                                    <td>
                                        <input
                                            type="number"
                                            name="maternityDaysTotal"
                                            value={formData.maternityDaysTotal || ''}
                                            className="input input-bordered w-full text-center font-FontNoto"
                                            maxLength="2"
                                            onChange={handleChange}
                                            onInput={(e) => {
                                                if (e.target.value < 0) e.target.value = 0;  // ‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡πÑ‡∏°‡πà‡πÉ‡∏´‡πâ‡∏Å‡∏£‡∏≠‡∏Å‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç‡∏ï‡∏¥‡∏î‡∏•‡∏ö
                                                if (e.target.value.length > 2) e.target.value = e.target.value.slice(0, 2);
                                            }}
                                        />
                                    </td>
                                </tr>


                                <tr>
                                    <td className="font-FontNoto">‡∏ö‡∏ß‡∏ä</td>
                                    <td>
                                        <input
                                            type="number"
                                            name="ordinationDaysUsed"
                                            value={formData.ordinationDaysUsed || ''}
                                            className="input input-bordered w-full text-center font-FontNoto"
                                            maxLength="2"
                                            onChange={handleChange}
                                            onInput={(e) => {
                                                if (e.target.value < 0) e.target.value = 0;  // ‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡πÑ‡∏°‡πà‡πÉ‡∏´‡πâ‡∏Å‡∏£‡∏≠‡∏Å‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç‡∏ï‡∏¥‡∏î‡∏•‡∏ö
                                                if (e.target.value.length > 2) e.target.value = e.target.value.slice(0, 2);
                                            }}
                                        />
                                    </td>
                                    <td>
                                        <input
                                            type="number"
                                            name="ordinationDaysCurrent"
                                            value={formData.ordinationDaysCurrent || ''}
                                            className="input input-bordered w-full text-center font-FontNoto"
                                            maxLength="2"
                                            onChange={handleChange}
                                            onInput={(e) => {
                                                if (e.target.value < 0) e.target.value = 0;  // ‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡πÑ‡∏°‡πà‡πÉ‡∏´‡πâ‡∏Å‡∏£‡∏≠‡∏Å‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç‡∏ï‡∏¥‡∏î‡∏•‡∏ö
                                                if (e.target.value.length > 2) e.target.value = e.target.value.slice(0, 2);
                                            }}
                                        />
                                    </td>
                                    <td>
                                        <input
                                            type="number"
                                            name="ordinationDaysTotal"
                                            value={formData.ordinationDaysTotal || ''}
                                            className="input input-bordered w-full text-center font-FontNoto"
                                            maxLength="2"
                                            onChange={handleChange}
                                            onInput={(e) => {
                                                if (e.target.value < 0) e.target.value = 0;  // ‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡πÑ‡∏°‡πà‡πÉ‡∏´‡πâ‡∏Å‡∏£‡∏≠‡∏Å‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç‡∏ï‡∏¥‡∏î‡∏•‡∏ö
                                                if (e.target.value.length > 2) e.target.value = e.target.value.slice(0, 2);
                                            }}
                                        />
                                    </td>
                                </tr>
                            </tbody>
                        </table>
                    </div>

                    <div className="flex justify-center gap-4">
                        <button
                            type="button"
                            onClick={handleSaveForm}
                            className="btn btn-outline btn-primary btn-sm font-FontNoto"
                        >
                            ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏ü‡∏≠‡∏£‡πå‡∏°
                        </button>
                        <button
                            type="button"
                            className="btn btn-outline btn-sm font-FontNoto"
                            onClick={() => setFormData({
                                leaveTypeId: "",
                                createdate: "",
                                fullname: "",
                                rolesid: "",
                                reason: "",
                                startdate: "",
                                enddate: "",
                                totalleave: 0,
                                leavedType: "",
                                leaved_startdate: "",
                                leaved_enddate: "",
                                totalleaved: 0,
                                friendeContact: "",
                                contact: "",
                                workingstart: "",
                                approvedDate: "",
                                hrApprovedDate: "",
                                sentToHRDate: "",
                                hrSignature: "",
                                managerName: "",
                                managerComment: "",
                            })}
                        >
                            ‡∏ü‡∏≠‡∏£‡πå‡∏°‡πÉ‡∏´‡∏°‡πà
                        </button>

                    </div>
                    <div className="flex gap-4">
                        <button
                            type="button"
                            className="btn btn-active w-1/2 font-FontNoto"
                            onClick={handleGeneratePDF}
                        >
                            ‡∏™‡∏£‡πâ‡∏≤‡∏á PDF
                        </button>

                        <button className="btn btn-warning w-1/2 font-FontNoto"
                            type="button"
                            onClick={() => sendFrom()} // ‚úÖ ‡πÉ‡∏ä‡πâ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡πÅ‡∏•‡πâ‡∏ß
                        >
                            ‡∏Å‡∏î‡∏™‡πà‡∏á‡∏ü‡∏≠‡∏£‡πå‡∏°‡πÑ‡∏õ‡∏¢‡∏±‡∏á‡∏´‡∏±‡∏ß‡∏´‡∏ô‡πâ‡∏≤
                        </button>


                    </div>
                </form>
                <div>
                    <h3 className="text-xl font-bold mb-4 font-FontNoto">‡πÅ‡∏ö‡∏ö‡∏ü‡∏≠‡∏£‡πå‡∏°‡∏ó‡∏µ‡πà‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å:</h3>
                    <div className="overflow-x-auto">
                        <table className="table w-full">
                            <thead className="text-center font-FontNoto">
                                <tr>
                                    <th>#</th>
                                    <th className="font-FontNoto">‡∏ä‡∏∑‡πà‡∏≠‡πÅ‡∏ö‡∏ö‡∏ü‡∏≠‡∏£‡πå‡∏°</th>
                                    <th className="font-FontNoto">‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£</th>
                                </tr>
                            </thead>
                            <tbody className="text-center font-FontNoto">
                                {savedForms.map((form, index) => (
                                    <tr key={form.id}>
                                        <td>{index + 1}</td>
                                        <td className="font-FontNoto">{form.fullname} - {form.leaveTypeId}</td>
                                        <td className="flex justify-center items-center gap-2">
                                            <button onClick={() => handleViewForm(form)} className="btn btn-sm btn-outline btn-success">
                                                ‡∏î‡∏π
                                            </button>
                                            <button
                                                className="btn btn-sm btn-outline btn-error"
                                                onClick={() => setSavedForms(savedForms.filter(f => f.id !== form.id))}
                                            >
                                                ‡∏•‡∏ö
                                            </button>
                                        </td>
                                    </tr>
                                ))}
                            </tbody>
                        </table>
                    </div>
                    {isNotificationModalOpen && (
                        <dialog open className="modal">
                            <div className="modal-box">
                                <h3 className="font-bold text-lg font-FontNoto">‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏î‡πâ‡∏™‡πà‡∏á‡πÅ‡∏ö‡∏ö‡∏ü‡∏≠‡∏£‡πå‡∏°‡πÅ‡∏•‡πâ‡∏ß</h3>
                                <p className="py-4 font-FontNoto">‡∏™‡πà‡∏á‡∏ü‡∏≠‡∏£‡πå‡∏°‡πÑ‡∏õ‡∏¢‡∏±‡∏á‡∏ú‡∏π‡πâ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏ó‡∏±‡πà‡∏ß‡πÑ‡∏õ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!</p>
                                <div className="modal-action">
                                    <button
                                        className="btn btn-outline btn-success font-FontNoto"
                                        onClick={() => setNotificationModalOpen(false)}
                                    >
                                        ‡∏ï‡∏Å‡∏•‡∏á
                                    </button>
                                </div>
                            </div>
                        </dialog>
                    )}
                    {isNotificationModalOpen && (
                        <dialog open className="modal">
                            <div className="modal-box">
                                <h3 className="font-bold text-lg font-FontNoto">{notificationMessage}</h3>
                                <div className="modal-action">
                                    <button
                                        className="btn btn-outline btn-success font-FontNoto"
                                        onClick={() => setNotificationModalOpen(false)}
                                    >
                                        ‡∏ï‡∏Å‡∏•‡∏á
                                    </button>
                                </div>
                            </div>
                        </dialog>
                    )}
                    {/* Modal for delete confirmation */}
                    <dialog id="delete_modal" className="modal">
                        <div className="modal-box">
                            <h3 className="font-bold text-lg font-FontNoto">‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏•‡∏ö</h3>
                            <p className="py-4 font-FontNoto">‡∏Ñ‡∏∏‡∏ì‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ô‡∏µ‡πâ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà?</p>
                            <div className="modal-action">
                                <button
                                    className="btn btn-outline btn-warning font-FontNoto"
                                    onClick={() => document.getElementById("delete_modal").close()}
                                >
                                    ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å
                                </button>
                                <button
                                    className="btn btn-outline btn-error font-FontNoto"
                                    onClick={() => {
                                        if (itemToDelete) {
                                            handleDeleteForm(itemToDelete);
                                            document.getElementById("delete_modal").close();
                                        }
                                    }}
                                >
                                    ‡∏•‡∏ö
                                </button>

                            </div>
                        </div>
                    </dialog>
                </div>
            </div>
        </div>
    );
};

export default LeaveForm;