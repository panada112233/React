import axios from "axios";
import React, { useState, useEffect } from "react";

const HRView = () => {
    const [hrApprovedForms, setHrApprovedForms] = useState([]); // ‡∏ü‡∏≠‡∏£‡πå‡∏°‡∏ó‡∏µ‡πà HR ‡πÄ‡∏ã‡πá‡∏ô‡∏ä‡∏∑‡πà‡∏≠‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥
    const [hrForms, setHrForms] = useState([]);
    const [formToApprove, setFormToApprove] = useState(null);
    const [hrName, setHrName] = useState(""); // ‡πÄ‡∏û‡∏¥‡πà‡∏° state ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ä‡∏∑‡πà‡∏≠ HR
    const [selectedFormForEdit, setSelectedFormForEdit] = useState(null); // ‡∏ü‡∏≠‡∏£‡πå‡∏°‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç
    const [selectedFormForDetails, setSelectedFormForDetails] = useState(null); // ‡∏ü‡∏≠‡∏£‡πå‡∏°‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏î‡∏π‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î
    const currentUserRole = sessionStorage.getItem("role");
    const [roleState, setRolesState] = useState(null)
    const [historyState, sethistoryState] = useState(null)
    const [isModalOpen, setIsModalOpen] = useState(false);
    const [modalMessage, setModalMessage] = useState("");
    const [leaveTypesState, setleaveTypesState] = useState(null)
    const [newDocument, setNewDocument] = useState({
        category: '',
        file: null,
        description: '',
    });

    useEffect(() => {
        //  loadLocalStorageData();
        fetchHRForms();
        fetchRole()
        fetchLeaveType()
    }, []);
    const fetchRole = async () => {
        const roleRes = await axios.get(`https://localhost:7039/api/Users/GetRoles`);

        setRolesState(roleRes.data)
    }
    const fetchLeaveType = async () => {
        const res = await axios.get(`https://localhost:7039/api/Document/GetLeaveTypes`);

        setleaveTypesState(res.data)
    }
    const handleApprove = async () => {
        if (!hrName) {
            alert("‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏ä‡∏∑‡πà‡∏≠ HR ‡∏Å‡πà‡∏≠‡∏ô‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥!");
            return;
        }

        if (!formToApprove || !formToApprove.documentId) {
            alert("‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ü‡∏≠‡∏£‡πå‡∏°‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥");
            return;
        }

        const approvalData = {
            DocumentID: formToApprove.documentId,
            HRSignature: hrName,
        };

        console.log("‚úÖ Data ‡∏ó‡∏µ‡πà‡∏™‡πà‡∏á‡πÑ‡∏õ API:", approvalData);

        try {
            const response = await fetch("https://localhost:7039/api/Document/ApproveByHR", {
                method: "POST",
                headers: { "Content-Type": "application/json" },
                body: JSON.stringify(approvalData),
            });

            if (response.ok) {
                // 1Ô∏è‚É£ ‡∏•‡∏ö‡∏ü‡∏≠‡∏£‡πå‡∏°‡∏ó‡∏µ‡πà‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥‡πÅ‡∏•‡πâ‡∏ß‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å `hrForms`
                setHrForms(prevForms => prevForms.filter(form => form.documentId !== formToApprove.documentId));

                // 2Ô∏è‚É£ ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ü‡∏≠‡∏£‡πå‡∏°‡∏ó‡∏µ‡πà‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥‡πÅ‡∏•‡πâ‡∏ß‡∏•‡∏á‡πÉ‡∏ô `hrApprovedForms`
                setHrApprovedForms(prevApprovedForms => [...prevApprovedForms, {
                    ...formToApprove,
                    hrSignature: hrName,
                    hrApprovedDate: new Date().toISOString() // ‚úÖ ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥
                }]);

                // 3Ô∏è‚É£ ‡πÄ‡∏Ñ‡∏•‡∏µ‡∏¢‡∏£‡πå‡∏Ñ‡πà‡∏≤‡∏ü‡∏≠‡∏£‡πå‡∏°‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥‡πÅ‡∏•‡∏∞‡∏ä‡∏∑‡πà‡∏≠ HR
                setFormToApprove(null);
                setHrName("");

                console.log("‚úÖ ‡∏ü‡∏≠‡∏£‡πå‡∏°‡∏ñ‡∏π‡∏Å‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥‡πÅ‡∏•‡∏∞‡∏¢‡πâ‡∏≤‡∏¢‡πÑ‡∏õ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≤‡∏á‡∏•‡πà‡∏≤‡∏á‡πÅ‡∏•‡πâ‡∏ß!");
            } else {
                const errorText = await response.text();
                console.error("‚ùå Server error:", errorText);
                alert("‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: " + errorText);
            }
        } catch (error) {
            console.error("‚ùå Error:", error);
        }
    };

    useEffect(() => {
        fetchApprovedForms(); // ‚úÖ ‡πÇ‡∏´‡∏•‡∏î‡∏ü‡∏≠‡∏£‡πå‡∏°‡∏ó‡∏µ‡πà HR ‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥‡πÅ‡∏•‡πâ‡∏ß
    }, []);


    const setdetailFromView = async (from) => {
        console.log(from)

        setSelectedFormForDetails({
            ...from,
            roleid: from.rolesid,
            leavedType: from.leavedType,
            leaveTypeId: from.leaveTypeId
        })
        await fetchHistory(from.documentId)
        // roleid: roles,
    }
    const fetchHistory = async (documentid) => {
        try {
            const res = await axios.get(`https://localhost:7039/api/Document/GetDocumentWithHistory/${documentid}`);
            console.log("fetchHistory", res.data.historyleave)

            const historyRes = res.data.historyleave;

            sethistoryState(historyRes)
        } catch (e) {
            console.log(e)
        }
    }
    const fetchHRForms = async () => {
        try {
            const response = await fetch("https://localhost:7039/api/Document/GetPendingFormsForHR");

            if (response.ok) {
                const data = await response.json();
                console.log("üìå ‡∏ü‡∏≠‡∏£‡πå‡∏°‡∏ó‡∏µ‡πà‡πÇ‡∏´‡∏•‡∏î‡∏°‡∏≤:", data);
                setHrForms(data); // ‚úÖ ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡∏°‡πà
            } else {
                console.warn("‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ü‡∏≠‡∏£‡πå‡∏°‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥");
                setHrForms([]);
            }
        } catch (error) {
            console.error("‚ùå Error fetching HR pending forms:", error);
        }
    };
    const fetchApprovedForms = async () => {
        try {
            const response = await fetch("https://localhost:7039/api/Document/GetApprovedFormsForHR");

            if (response.ok) {
                const data = await response.json();
                setHrApprovedForms(data); // ‚úÖ ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ü‡∏≠‡∏£‡πå‡∏°‡∏ó‡∏µ‡πà HR ‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥‡πÅ‡∏•‡πâ‡∏ß‡∏à‡∏≤‡∏Å‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
            } else {
                setHrApprovedForms([]); // ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡∏≠‡∏≤‡∏£‡πå‡πÄ‡∏£‡∏¢‡πå‡∏ß‡πà‡∏≤‡∏á
            }
        } catch (error) {
            console.error("‚ùå Error fetching approved HR forms:", error);
        }
    };

    const handleEditHRSignature = async () => {
        if (!selectedFormForEdit || !selectedFormForEdit.documentId) {
            alert("‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ü‡∏≠‡∏£‡πå‡∏°‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç");
            return;
        }

        if (!selectedFormForEdit.hrSignature) {
            alert("‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏ä‡∏∑‡πà‡∏≠ HR");
            return;
        }

        const updateData = {
            DocumentID: selectedFormForEdit.documentId,
            HRSignature: selectedFormForEdit.hrSignature,
        };

        try {
            const response = await fetch("https://localhost:7039/api/Document/EditHRSignature", {
                method: "PUT",
                headers: { "Content-Type": "application/json" },
                body: JSON.stringify(updateData),
            });

            if (response.ok) {

                // ‚úÖ ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ü‡∏≠‡∏£‡πå‡∏°‡∏ó‡∏µ‡πà HR ‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥‡πÅ‡∏•‡πâ‡∏ß‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á
                await fetchApprovedForms();

                setSelectedFormForEdit(null);
            } else {
                const errorText = await response.text();
                console.error("‚ùå Server error:", errorText);
                alert("‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: " + errorText);
            }
        } catch (error) {
            console.error("‚ùå Error:", error);
            alert("‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏ä‡∏∑‡πà‡∏≠ HR");
        }
    };

    // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÅ‡∏õ‡∏•‡∏á‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡πá‡∏ô‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö "DD/MM/YYYY"
    const formatDate = (dateStr) => {
        if (!dateStr) return "-";
        const date = new Date(dateStr);
        return date.toLocaleDateString("th-TH", {
            day: "2-digit",
            month: "2-digit",
            year: "numeric",
        });
    };
    const handleSendToEmployee = async (form) => {
        try {
            const response = await fetch("https://localhost:7039/api/Document/SendDocumentToEmployee", {
                method: "POST",
                headers: { "Content-Type": "application/json" },
                body: JSON.stringify({
                    userId: form.userId || 0,
                    fullname: form.fullname || "‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏‡∏ä‡∏∑‡πà‡∏≠",
                    documentId: form.documentId || "",
                    leaveTypeId: form.leaveTypeId || ""
                }),
            });

            if (response.ok) {
                setModalMessage("‚úÖ ‡∏™‡πà‡∏á‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£‡πÉ‡∏´‡πâ‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!");

                // ‚úÖ ‡∏•‡∏ö‡∏ü‡∏≠‡∏£‡πå‡∏°‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏™‡πà‡∏á‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ó‡∏µ‡πà‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥‡πÅ‡∏•‡πâ‡∏ß
                setHrApprovedForms(prevForms => prevForms.filter(f => f.documentId !== form.documentId));
            } else {
                setModalMessage("‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏™‡πà‡∏á‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£‡πÉ‡∏´‡πâ‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô‡πÑ‡∏î‡πâ");
            }
        } catch (error) {
            console.error("‚ùå Error:", error);
            setModalMessage("‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£‡πÉ‡∏´‡πâ‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô");
        } finally {
            setIsModalOpen(true); // ‡πÄ‡∏õ‡∏¥‡∏î Modal ‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô
        }
    };



    return (
        <div className="p-6">
            {/* ‡∏ü‡∏≠‡∏£‡πå‡∏°‡∏ó‡∏µ‡πà‡∏´‡∏±‡∏ß‡∏´‡∏ô‡πâ‡∏≤‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥ */}
            <section>
                <h2 className="text-xl font-bold mt-8 font-FontNoto">‡∏ü‡∏≠‡∏£‡πå‡∏°‡∏ó‡∏µ‡πà‡∏´‡∏±‡∏ß‡∏´‡∏ô‡πâ‡∏≤‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥</h2>
                {hrForms.length > 0 ? (
                    <table className="table table-zebra w-full">
                        <thead>
                            <tr className="text-black bg-blue-100">
                                <th>#</th>
                                <th className="font-FontNoto">‡∏ä‡∏∑‡πà‡∏≠‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô</th>
                                <th className="font-FontNoto">‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥</th>
                                <th className="font-FontNoto">‡∏•‡∏≤‡∏¢‡πÄ‡∏ã‡πá‡∏ô‡∏ú‡∏π‡πâ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏ó‡∏±‡πà‡∏ß‡πÑ‡∏õ</th>
                                <th className="font-FontNoto">‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ñ‡∏¥‡∏î‡πÄ‡∏´‡πá‡∏ô</th>
                                <th className="font-FontNoto text-center">‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£</th>
                            </tr>
                        </thead>
                        <tbody>
                            {hrForms.map((form, index) => (
                                <tr key={form.id || index}>
                                    <td className="font-FontNoto">{index + 1}</td>
                                    <td className="font-FontNoto">{form.fullname}</td>
                                    <td className="font-FontNoto">{formatDate(form.approvedDate)}</td>
                                    <td className="font-FontNoto">{form.managerName}</td>
                                    <td className="font-FontNoto">{form.managerComment}</td>
                                    <td className="text-center">
                                        <button
                                            className="btn btn-sm btn-outline btn-info ml-2 font-FontNoto"
                                            onClick={() => setdetailFromView(form)} // ‡πÄ‡∏õ‡∏¥‡∏î Modal ‡∏î‡∏π‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î
                                        >
                                            ‡∏î‡∏π‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î
                                        </button>
                                        <button
                                            className="btn btn-sm btn-outline btn-success ml-2 font-FontNoto"
                                            onClick={() => {
                                                if (form) {
                                                    setFormToApprove(form); // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ü‡∏≠‡∏£‡πå‡∏°‡∏Å‡πà‡∏≠‡∏ô‡πÄ‡∏õ‡∏¥‡∏î Modal
                                                } else {
                                                    alert("‡∏ü‡∏≠‡∏£‡πå‡∏°‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á!");
                                                }
                                            }}
                                        >
                                            ‡πÄ‡∏ã‡πá‡∏ô‡∏ä‡∏∑‡πà‡∏≠
                                        </button>
                                    </td>
                                </tr>
                            ))}
                        </tbody>
                    </table>

                ) : (
                    <p className="font-FontNoto text-center">‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏ü‡∏≠‡∏£‡πå‡∏°‡∏ó‡∏µ‡πà‡∏´‡∏±‡∏ß‡∏´‡∏ô‡πâ‡∏≤‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥</p>
                )}
                {formToApprove && (
                    <dialog open className="modal modal-open">
                        <div className="modal-box">
                            <h3 className="font-bold text-lg font-FontNoto">‡πÄ‡∏ã‡πá‡∏ô‡∏ä‡∏∑‡πà‡∏≠‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥</h3>
                            <p className="font-FontNoto">‡∏Ñ‡∏∏‡∏ì‡∏Å‡∏≥‡∏•‡∏±‡∏á ‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥‡∏ü‡∏≠‡∏£‡πå‡∏°‡∏Ç‡∏≠‡∏á : {formToApprove.fullname}</p>
                            <div className="mt-4">
                                <label className="label">
                                    <span className="label-text font-FontNoto">‡∏ä‡∏∑‡πà‡∏≠ ‡∏ó‡∏£‡∏±‡∏û‡∏¢‡∏≤‡∏Å‡∏£‡∏ö‡∏∏‡∏Ñ‡∏Ñ‡∏• :</span>
                                </label>
                                <input
                                    type="text"
                                    className="input input-bordered w-full font-FontNoto"
                                    value={hrName}
                                    onChange={(e) => {
                                        const onlyText = e.target.value.replace(/[0-9]/g, ""); // ‚úÖ ‡∏•‡∏ö‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç‡∏≠‡∏≠‡∏Å
                                        setHrName(onlyText);
                                    }}
                                />
                            </div>

                            <div className="modal-action">
                                <button
                                    className="btn btn-outline btn-success font-FontNoto"
                                    onClick={handleApprove} // ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å handleApprove ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏Å‡∏î‡∏õ‡∏∏‡πà‡∏°
                                >
                                    ‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô
                                </button>
                                <button
                                    className="btn btn-outline btn-error font-FontNoto"
                                    onClick={() => setFormToApprove(null)}
                                >
                                    ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å
                                </button>
                            </div>
                        </div>
                    </dialog>
                )}
            </section>

            {/* ‡∏ü‡∏≠‡∏£‡πå‡∏°‡∏ó‡∏µ‡πà HR ‡πÄ‡∏ã‡πá‡∏ô‡∏ä‡∏∑‡πà‡∏≠‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥ */}
            <section className="mt-8">
                <h2 className="text-lg font-bold mb-2 font-FontNoto">‡∏ü‡∏≠‡∏£‡πå‡∏°‡∏ó‡∏µ‡πà HR ‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥‡πÅ‡∏•‡πâ‡∏ß</h2>
                {hrApprovedForms.length > 0 ? (
                    <table className="table table-zebra w-full">
                        <thead>
                            <tr className="text-black bg-blue-100">
                                <th>#</th>
                                <th className="font-FontNoto text-center">‡∏ä‡∏∑‡πà‡∏≠‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô</th>
                                {/* <th className="font-FontNoto text-center">‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥</th> */}
                                <th className="font-FontNoto text-center">‡∏•‡∏≤‡∏¢‡πÄ‡∏ã‡πá‡∏ô‡∏Å‡∏≤‡∏£‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥</th>
                                <th className="font-FontNoto text-center">‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ñ‡∏¥‡∏î‡πÄ‡∏´‡πá‡∏ô</th>
                                <th className="font-FontNoto text-center">‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥</th>
                                <th className="font-FontNoto text-center">‡∏•‡∏≤‡∏¢‡πÄ‡∏ã‡πá‡∏ô HR</th>
                                <th className="font-FontNoto text-center">‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£</th>
                            </tr>
                        </thead>
                        <tbody>
                            {hrApprovedForms.map((form, index) => (
                                <tr key={`${form.id}-${index}`}>  {/* ‡πÉ‡∏ä‡πâ combination ‡∏Ç‡∏≠‡∏á `form.id` ‡πÅ‡∏•‡∏∞ `index` ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ key ‡πÄ‡∏õ‡πá‡∏ô‡πÄ‡∏≠‡∏Å‡∏•‡∏±‡∏Å‡∏©‡∏ì‡πå */}
                                    <td className="font-FontNoto text-center">{index + 1}</td>
                                    <td className="font-FontNoto text-center">{form.fullname}</td>
                                    {/* <td className="font-FontNoto text-center">{formatDate(form.approvedDate)}</td> */}
                                    <td className="font-FontNoto text-center">{form.managerName}</td>
                                    <td className="font-FontNoto text-center">{form.managerComment}</td>
                                    <td className="font-FontNoto text-center">{formatDate(form?.hrApprovedDate)}</td>
                                    <td className="font-FontNoto text-center">{form.hrSignature}</td>

                                    <td className="font-FontNoto text-center">
                                        <button
                                            className="btn btn-sm btn-outline btn-primary"
                                            onClick={() => handleSendToEmployee(form)} // ‚úÖ ‡∏Å‡∏î‡πÅ‡∏•‡πâ‡∏ß‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£‡∏à‡∏∞‡∏ñ‡∏π‡∏Å‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏•‡∏á‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
                                        >
                                            ‡∏™‡πà‡∏á‡πÉ‡∏´‡πâ‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô
                                        </button>
                                        <button
                                            className="btn btn-sm btn-outline btn-warning ml-2"
                                            onClick={() => setSelectedFormForEdit(form)} // ‡πÄ‡∏õ‡∏¥‡∏î Modal ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç
                                        >
                                            ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç
                                        </button>
                                    </td>
                                </tr>
                            ))}
                        </tbody>

                    </table>
                ) : (
                    <p className="font-FontNoto text-center">‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏ü‡∏≠‡∏£‡πå‡∏°‡∏ó‡∏µ‡πà HR ‡πÄ‡∏ã‡πá‡∏ô‡∏ä‡∏∑‡πà‡∏≠‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥</p>
                )}
                {selectedFormForEdit && (
                    <dialog open className="modal modal-open">
                        <div className="modal-box">
                            <h3 className="font-bold text-lg font-FontNoto">‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏ä‡∏∑‡πà‡∏≠‡∏ó‡∏£‡∏±‡∏û‡∏¢‡∏≤‡∏Å‡∏£‡∏ö‡∏∏‡∏Ñ‡∏Ñ‡∏•</h3>
                            <div className="mt-4">
                                <label className="label">
                                    <span className="label-text font-FontNoto">‡∏ä‡∏∑‡πà‡∏≠ ‡∏ó‡∏£‡∏±‡∏û‡∏¢‡∏≤‡∏Å‡∏£‡∏ö‡∏∏‡∏Ñ‡∏Ñ‡∏• :</span>
                                </label>
                                <input
                                    type="text"
                                    className="input input-bordered w-full font-FontNoto"
                                    value={selectedFormForEdit.hrSignature}
                                    onChange={(e) => {
                                        const onlyText = e.target.value.replace(/[0-9]/g, ""); // ‚úÖ ‡∏•‡∏ö‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç‡∏≠‡∏≠‡∏Å
                                        setSelectedFormForEdit({
                                            ...selectedFormForEdit,
                                            hrSignature: onlyText,
                                        });
                                    }}
                                />
                            </div>
                            <div className="modal-action">
                                <button
                                    className="btn btn-outline btn-success font-FontNoto"
                                    onClick={handleEditHRSignature} // ‚úÖ ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏ä‡∏∑‡πà‡∏≠ HR
                                >
                                    ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å
                                </button>
                                <button
                                    className="btn btn-outline btn-error font-FontNoto"
                                    onClick={() => setSelectedFormForEdit(null)} // ‡∏õ‡∏¥‡∏î Modal
                                >
                                    ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å
                                </button>
                            </div>
                        </div>
                    </dialog>
                )}
                {isModalOpen && (
                    <dialog open className="modal modal-open">
                        <div className="modal-box">
                            <h3 className="font-bold text-lg font-FontNoto">‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô</h3>
                            <p className="font-FontNoto">{modalMessage}</p>
                            <div className="modal-action">
                                <button className="btn btn-outline btn-success font-FontNoto" onClick={() => setIsModalOpen(false)}>
                                    ‡∏ï‡∏Å‡∏•‡∏á
                                </button>
                            </div>
                        </div>
                    </dialog>
                )}

                {selectedFormForDetails && (
                    <dialog open className="modal modal-open">
                        <div className="modal-box">
                            <h3 className="font-bold text-lg font-FontNoto text-center">‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏ü‡∏≠‡∏£‡πå‡∏°</h3>
                            <table className="table table-zebra w-full mt-6">
                                <tbody>
                                    <tr>
                                        <td colSpan="2" style={{ display: 'flex' }}>
                                            <div className="font-FontNoto" style={{ marginRight: '40px' }}><strong className="font-FontNoto">‡∏ä‡∏∑‡πà‡∏≠ :</strong> {selectedFormForDetails.fullname}</div>
                                            <div className="font-FontNoto"><strong className="font-FontNoto">‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á :</strong> {
                                                roleState.find(x => x.rolesid == selectedFormForDetails.roleid)?.rolesname

                                            }</div>
                                        </td>
                                    </tr>
                                    <tr>
                                        <td colSpan="2" style={{ display: 'flex' }}>
                                            <div className="font-FontNoto" style={{ marginRight: '100px' }}><strong className="font-FontNoto">‡∏Ç‡∏≠‡∏•‡∏≤ :</strong> {
                                                leaveTypesState.find(x => x.leaveTypeid == selectedFormForDetails.leaveTypeId)?.leaveTypeTh
                                            }
                                            </div>
                                            <div className="font-FontNoto"><strong className="font-FontNoto">‡πÄ‡∏ô‡∏∑‡πà‡∏≠‡∏á‡∏à‡∏≤‡∏Å :</strong> {selectedFormForDetails.reason}</div>
                                        </td>
                                    </tr>
                                    <tr>
                                        <td colSpan="2" style={{ display: 'flex' }}>
                                            <div className="font-FontNoto" style={{ marginRight: '25px' }}><strong className="font-FontNoto">‡∏ï‡∏±‡πâ‡∏á‡πÅ‡∏ï‡πà‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà :</strong> {formatDate(selectedFormForDetails?.startdate)}</div>
                                            <div className="font-FontNoto" style={{ marginRight: '20px' }}><strong className="font-FontNoto">‡∏ñ‡∏∂‡∏á‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà :</strong> {formatDate(selectedFormForDetails?.enddate)}</div>
                                            <div className="font-FontNoto"><strong className="font-FontNoto">‡∏Å‡∏≥‡∏´‡∏ô‡∏î :</strong> {selectedFormForDetails.totalleave} ‡∏ß‡∏±‡∏ô </div>
                                        </td>
                                    </tr>
                                    <tr>
                                        <td colSpan="2" style={{ display: 'flex' }}>
                                            <div className="font-FontNoto"><strong className="font-FontNoto">‡∏Ç‡πâ‡∏≤‡∏û‡πÄ‡∏à‡πâ‡∏≤‡πÑ‡∏î‡πâ‡∏•‡∏≤ :</strong>
                                                {leaveTypesState.find(x => x.leaveTypeid == selectedFormForDetails.leavedType)?.leaveTypeTh}
                                            </div>
                                        </td>
                                    </tr>
                                    <tr>
                                        <td colSpan="2" style={{ display: 'flex' }}>
                                            <div className="font-FontNoto" style={{ marginRight: '25px' }}><strong className="font-FontNoto">‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏™‡∏∏‡∏î‡∏ó‡πâ‡∏≤‡∏¢:</strong> {formatDate(selectedFormForDetails?.leavedStartdate)}</div>
                                            <div className="font-FontNoto" style={{ marginRight: '20px' }}><strong className="font-FontNoto">‡∏ñ‡∏∂‡∏á‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà :</strong> {formatDate(selectedFormForDetails?.leavedEnddate)}</div>
                                            <div className="font-FontNoto"><strong className="font-FontNoto">‡∏Å‡∏≥‡∏´‡∏ô‡∏î :</strong> {selectedFormForDetails.totalleaved} ‡∏ß‡∏±‡∏ô </div>
                                        </td>
                                    </tr>
                                    <tr>
                                        <td colSpan="2" style={{ display: 'flex' }}>
                                            <div className="font-FontNoto" style={{ marginRight: '50px' }}><strong className="font-FontNoto">‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á‡∏•‡∏≤ ‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠‡πÑ‡∏î‡πâ‡∏ó‡∏µ‡πà:</strong> {selectedFormForDetails?.friendeContact}</div>
                                            <div><strong className="font-FontNoto">‡πÄ‡∏ö‡∏≠‡∏£‡πå‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠ :</strong> {selectedFormForDetails?.contact}</div>
                                        </td>
                                    </tr>
                                    <tr className="font-FontNoto text-center">
                                        <td style={{ display: 'flex', justifyContent: 'center', alignItems: 'center' }}>
                                            <div className="font-FontNoto text-center">
                                                <strong className="font-FontNoto text-center">‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡∏•‡∏≤‡πÉ‡∏ô‡∏õ‡∏µ‡∏ô‡∏µ‡πâ ‡∏ß‡∏±‡∏ô‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏á‡∏≤‡∏ô:</strong> {formatDate(selectedFormForDetails?.workingstart)}
                                            </div>
                                        </td>
                                    </tr>
                                    <tr>
                                        <thead className="text-center font-FontNoto">
                                            <tr>
                                                <th className="font-FontNoto">‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏Å‡∏≤‡∏£‡∏•‡∏≤</th>
                                                <th className="font-FontNoto">‡∏•‡∏≤‡∏°‡∏≤‡πÅ‡∏•‡πâ‡∏ß (‡∏ß‡∏±‡∏ô)</th>
                                                <th className="font-FontNoto">‡∏•‡∏≤‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏ô‡∏µ‡πâ (‡∏ß‡∏±‡∏ô)</th>
                                                <th className="font-FontNoto">‡∏£‡∏ß‡∏° (‡∏ß‡∏±‡∏ô)</th>
                                            </tr>
                                            <tr>
                                                <th className="font-FontNoto">‡∏õ‡πà‡∏ß‡∏¢</th>
                                                <td className="font-FontNoto text-center">{historyState?.lastTotalStickDay}</td>
                                                <td className="font-FontNoto text-center">{historyState?.totalStickDay}</td>
                                                <td className="font-FontNoto text-center">{historyState?.sumStickDay}</td>
                                            </tr>
                                            <tr>
                                                <th className="font-FontNoto">‡∏Å‡∏¥‡∏à‡∏™‡πà‡∏ß‡∏ô‡∏ï‡∏±‡∏ß</th>
                                                <td className="font-FontNoto text-center">{historyState?.lastTotalPersonDay}</td>
                                                <td className="font-FontNoto text-center">{historyState?.totalPersonDay}</td>
                                                <td className="font-FontNoto text-center">{historyState?.sumPersonDay}</td>
                                            </tr>
                                            <tr>
                                                <th className="font-FontNoto">‡∏û‡∏±‡∏Å‡∏£‡πâ‡∏≠‡∏ô</th>
                                                <td className="font-FontNoto text-center">{historyState?.lastTotalVacationDays}</td>
                                                <td className="font-FontNoto text-center">{historyState?.totalVacationDays}</td>
                                                <td className="font-FontNoto text-center">{historyState?.sumVacationDays}</td>
                                            </tr>
                                            <tr>
                                                <th className="font-FontNoto">‡∏Ñ‡∏•‡∏≠‡∏î‡∏ö‡∏∏‡∏ï‡∏£</th>
                                                <td className="font-FontNoto text-center">{historyState?.lastTotalMaternityDaystotal}</td>
                                                <td className="font-FontNoto text-center">{historyState?.totalMaternityDaystotal}</td>
                                                <td className="font-FontNoto text-center">{historyState?.sumMaternityDaystotal}</td>
                                            </tr>
                                            <tr>
                                                <th className="font-FontNoto">‡∏ö‡∏ß‡∏ä</th>
                                                <td className="font-FontNoto text-center">{historyState?.lastTotalOrdinationDays}</td>
                                                <td className="font-FontNoto text-center">{historyState?.totalOrdinationDays}</td>
                                                <td className="font-FontNoto text-center">{historyState?.sumOrdinationDays}</td>
                                            </tr>
                                        </thead>
                                    </tr>
                                </tbody>
                            </table>
                            {/* ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°‡∏ï‡∏≤‡∏°‡∏ó‡∏µ‡πà‡∏Ñ‡∏∏‡∏ì‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£ */}
                            <div className="modal-action">
                                <button
                                    className="btn btn-outline btn-error font-FontNoto"
                                    onClick={() => setSelectedFormForDetails(null)} // ‡∏õ‡∏¥‡∏î Modal
                                >
                                    ‡∏õ‡∏¥‡∏î
                                </button>
                            </div>
                        </div>
                    </dialog>
                )}

            </section>

        </div>
    );
};

export default HRView;
